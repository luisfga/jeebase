#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]
ssl.port = 8443
authc.loginUrl = /auth/login.xhtml

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

jdbcDataSource = org.apache.shiro.jndi.JndiObjectFactory
jdbcDataSource.resourceName = java:/comp/env/applicationDS

jdbcRealm = br.com.luisfga.service.security.ApplicationShiroJdbcRealm
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $jdbcDataSource

securityManager.realms = $jdbcRealm

securityManager.rememberMeManager.cipherKey = dW0gcGVxdWVubyBwYXNzbw==

####################
# SESSION MANAGEMENT
####################
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager

#Remove jsessionid from url string
sessionManager.sessionIdUrlRewritingEnabled = false

#For problems of needing login again, mainly on jboss/wildfly https://developer.jboss.org/thread/243192
sessionManager.sessionIdCookie.name = shiro.session.id

securityManager.sessionManager = $sessionManager

sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
securityManager.sessionManager.sessionDAO = $sessionDAO

cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
securityManager.cacheManager = $cacheManager

[urls]

#descomentar a linha abaixo para que todas as requisições sejam encaminhadas via TLS (necessário certificado)
#as linhas seguintes que forem iguais podem ser excluídas
#/secure/** = ssl, authc
#/** = ssl
/secure/** = authc