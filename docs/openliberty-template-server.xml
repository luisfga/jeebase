<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">

    <!-- Enable features -->
    <featureManager>
        <feature>adminCenter-1.0</feature>

        <!-- Features need by the app from EE stack -->
        <feature>javaee-8.0</feature>
    </featureManager>

    <!--For a user registry configuration, configure your user registry. For example, configure a basic user registry using the
    basicRegistry element. Specify your own user name below in the name attribute of the user element. For the password, 
    generate an encoded password using bin/securityUtility encode and add it in the password attribute of the user element. 
    Then uncomment the user element. -->
    <basicRegistry id="basic" realm="BasicRealm"> 
        <!-- O password aqui é 'oliberty123' mas está encriptado com a ferramenta bin/securityUtility. -->
        <user name="oliberty" password="{xor}MDM2PTotKyZubWw=" />  
    </basicRegistry>
    <!-- A user with the administrator-role has full access to the Admin Center -->
    <administrator-role>
        <user>oliberty</user>
        <group>managers</group>
    </administrator-role>

    <!-- To protect keystore files that have server authentication credentials, define a keystore and assign it a password -->
    <keyStore id="defaultKeyStore" password="Liberty" />
    
    <!-- To access this server from a remote client add a host attribute to the following element, e.g. host="*" -->
    <httpEndpoint id="defaultHttpEndpoint"
                  httpPort="9080"
                  httpsPort="9443" />
                  
    <!-- Automatically expand WAR files and EAR files -->
    <applicationManager autoExpand="true"/>

    <!-- Default SSL configuration enables trust for default certificates from the Java runtime --> 
    <ssl id="defaultSSLConfig" trustDefaultCerts="true" />

    <remoteFileAccess>
        <writeDir>${server.config.dir}</writeDir>
    </remoteFileAccess>
	
    <!-- JDBC DRIVERS (criar pasta '<server_dir>/jdbc' e colocar drivers jdbc lá) -->
    <library id="jdbcLib">
        <fileset dir="jdbc" includes="*.jar"/>
    </library>

    <!-- DATASOURCES (Exemplo pra postgresql. Com esses dados o server já monta a url sozinho)-->
    <dataSource jndiName="jdbc/jeebaseDS">
        <jdbcDriver libraryRef="jdbcLib"/>
        <properties serverName="localhost" portNumber="5432"
                    databaseName="nome do banco"
                    user="usuário que a app usuário" password="senha desse usuário"/>
    </dataSource>
	
    <!-- MAIL SESSIONS (exemplo usando o outlook.com. Falta colocar o endereço e a senha)-->
    <mailSession>
        <mailSessionID>jeebaseMailSession</mailSessionID>
        <jndiName>mail/jeebaseMailSession</jndiName>
        <description>JEEBase Mail Session</description>
        <transportProtocol>smtp</transportProtocol>
        <host>smtp.office365.com</host>
        <user>endereçodoemail@email.com</user>
        <password>senha da conta de email</password>
        <from>LuisFGA JEEBase</from>
        <property name="mail.smtp.port" value="587" />
        <property name="mail.smtp.auth" value="true"/>
        <property name="mail.smtp.starttls.enable" value="true"/>
        <property name="mail.smtp.ssl.trust" value="smtp.office365.com"/>
        <property name="mail.debug" value="true"/>
        <!-- redundância do 'user' porque a aplicação utiliza essa forma 'mail.smtp.user' para recuperar esse valor.
        Mantido assim apenas por portabilidade do código e porque funciona dessa forma no TomEE, WildFly e Payara, menos no openliberty -->
        <property name="mail.smtp.user" value="endereçodoemail@email.com"/>
    </mailSession>

</server>