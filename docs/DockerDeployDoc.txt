# EXEMPLO resumido de build e deploy do container
#1. mvn clean package liberty:package -Dinclude=runnable
#TEST: java -jar target/jeebase.jar --default.http.port=9876 --default.https.port=9877
#2 docker build -m 500M -f Dockerfile -t luisfga-jeebase:prd . --build-arg MAIL_HOST --build-arg MAIL_PORT --build-arg MAIL_USER --build-arg MAIL_PASS --build-arg JEEBASE_PRD_DB_HOST --build-arg JEEBASE_PRD_DB_PORT --build-arg JEEBASE_PRD_DB_USER --build-arg JEEBASE_PRD_DB_PASS --build-arg JEEBASE_PRD_DATABASE
#3. docker tag luisfga-jeebase:prd registry.heroku.com/luisfga-jeebase/web
#4. docker push registry.heroku.com/luisfga-jeebase/web
#5. heroku container:release web -a luisfga-jeebase

#RUNNING
# docker run --name luisfga-jeebase -e PORT=8080 -p 8080:8080 luisfga-jeebase:prd 

#STOPPING
# docker stop luisfga-jeebase && docker rm luisfga-jeebase 

# Excluir 'dangling' containers
# docker rmi -f $(docker images --filter "dangling=true" -q)

# Listar containeres em execução
# docker ps

# Acessar bash dentro de um container que esteja rodando
# docker exec -it <containerID> /bin/bash

# inspecionar o exit code de um container que não estartou
# a qualquer momento -> docker inspect <container-id> --format='{{.State.ExitCode}}'
# logo após a falha -> echo $?

#HEROKU TIPS
#https://devcenter.heroku.com/articles/container-registry-and-runtime#building-and-pushing-image-s